   subject



#service

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Subject } from 'rxjs/Subject';
 
 
@Injectable()
export class DataShareService {
 
    shareDataSubject = new Subject<any>(); //Decalring new RxJs Subject
 
     sendDataToOtherComponent(somedata){
      this.shareDataSubject.next(somedata);
  }
}


#component 1

import { DataShareService } from './datashare.service';
import { Component, OnInit } from '@angular/core';
 
@Component({
  selector: 'data-pass',
  templateUrl: './datapassing.component.html',
  styleUrls: ['./datapassing.component.css']
})
export class DataPassingComponent {
   
  constructor( private dataShareService: DataShareService) { }
 
  passData(){
    this.dataShareService.DataShareService("data you want to pass");
  }
}



#component 2

import { DataShareService } from './datashare.service';
import { Component, OnInit } from '@angular/core';
 
@Component({
  selector: 'data-receive',
  templateUrl: './datareceiving.component.html',
  styleUrls: ['./datareceiving.component.css']
})
export class DataReceivingComponent {
   
  constructor( private dataShareService: DataShareService) { 
       this.dataShareService.shareDataSubject.subscribe(receiveddata=>{
       console.log(receiveddata); 
    });
   }
 
}







   #BehaviorSubject




   #data.service.ts


import {Injectable} from  '@ angular / core' ; 
importer {BehaviorSubject} de  'rxjs' ;

@Injectable () 
export  class DataService {

  messageSource privé = nouveau BehaviorSubject ( 'message par défaut' ); 
  currentMessage = this .messageSource.asObservable ();

  constructeur () { }

  changeMessage (message: string ) { this .messageSource.next (message)   }
}



   #parent.component.ts



importer {Component, OnInit} à partir de  '@ angular / core' ; 
importer {DataService} de  "../data.service" ;

@Component ({ 
  selector: 'app-parent' , 
  template: ` 
    {{message}} 
  ` , 
  styleUrls: [ './sibling.component.css' ] 
}) La classe d' 
exportation  ParentComponent implémente OnInit {

  message:string;

  constructeur ( données privées : DataService ) {}

  ngOnInit () { this .data.currentMessage.subscribe ( message => this .message = message)   }
}




  #sibling.component.ts




importer {Component, OnInit} à partir de  '@ angular / core' ; 
importer {DataService} de  "../data.service" ;

@Component ({ 
  selector: 'app-frere' ' , 
  template: ` 
    {{message}} 
    <button (clic) =" newMessage () "> Nouveau message </ button> 
  ` , 
  styleUrls: [ ' ./sibling.component. css ' ] 
}) 
la  classe d' exportation SiblingComponent implémente OnInit {

  message:string;

  constructeur ( données privées : DataService ) {}

  ngOnInit () { this .data.currentMessage.subscribe ( message => this .message = message)   }
     


  newMessage () { this .data.changeMessage ( "Hello from Sibling" )   }
    


}
